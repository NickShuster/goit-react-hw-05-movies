{"version":3,"file":"static/js/247.5430a2d4.chunk.js","mappings":"8LA0CA,UAtCA,WACE,IAAQA,GAAYC,EAAAA,EAAAA,MAAZD,QACR,GAAwBE,EAAAA,EAAAA,UAAS,IAAjC,eAAOC,EAAP,KAAaC,EAAb,KAYA,OAVAC,EAAAA,EAAAA,YAAU,YACRC,EAAAA,EAAAA,IAAkBN,GACfO,MAAK,SAACJ,GACLC,EAAQD,EACT,IACAK,OAAM,SAACC,GACNC,QAAQD,MAAM,uBAAwBA,EACvC,GACJ,GAAE,CAACT,KAGF,yBACmB,IAAhBG,EAAKQ,QACJ,2DAEA,wBACGR,EAAKS,KAAI,SAACC,GAAD,OACR,0BACGA,EAAMC,eACL,gBACEC,IAAG,0CAAqCF,EAAMC,cAC9CE,IAAKH,EAAMI,QAGf,kCAAUJ,EAAMI,SAChB,uCAAeJ,EAAMK,eARdL,EAAMM,GADP,OAgBnB,C,+LCtCKC,EAAU,mCACVC,EAAW,+BAEXC,EAAmB,mCAAG,6GAEDC,EAAAA,EAAAA,IAAA,UAClBF,EADkB,wCACsBD,IAHrB,cAElBI,EAFkB,yBAKjBA,EAASC,KAAKC,SALG,oGAAH,qDAWnBC,EAAY,mCAAG,WAAOC,GAAP,gGAEML,EAAAA,EAAAA,IAAA,UAClBF,EADkB,iCACeD,EADf,kBACgCQ,IAHtC,cAEXJ,EAFW,yBAKVA,EAASC,KAAKC,SALJ,oGAAH,sDAWZG,EAAiB,mCAAG,WAAO7B,GAAP,gGAECuB,EAAAA,EAAAA,IAAA,UAClBF,EADkB,kBACArB,EADA,oBACmBoB,IAHpB,cAEhBI,EAFgB,yBAKfA,EAASC,MALM,oGAAH,sDAWjBnB,EAAiB,mCAAG,WAAON,GAAP,gGAECuB,EAAAA,EAAAA,IAAA,UAClBF,EADkB,kBACArB,EADA,4BAC2BoB,IAH5B,cAEhBI,EAFgB,yBAKfA,EAASC,KAAKtB,MALC,oGAAH,sDAWjB2B,EAAiB,mCAAG,WAAO9B,GAAP,gGAECuB,EAAAA,EAAAA,IAAA,UAClBF,EADkB,kBACArB,EADA,4BAC2BoB,IAH5B,cAEhBI,EAFgB,yBAKfA,EAASC,KAAKC,SALC,oGAAH,qD","sources":["components/Cast/Cast.jsx","components/api.js"],"sourcesContent":["import React, { useEffect, useState } from 'react';\nimport { useParams } from 'react-router-dom';\nimport { fetchMovieCredits } from '../api';\n\nfunction Cast() {\n  const { movieId } = useParams();\n  const [cast, setCast] = useState([]);\n\n  useEffect(() => {\n    fetchMovieCredits(movieId)\n      .then((cast) => {\n        setCast(cast);\n      })\n      .catch((error) => {\n        console.error('Error fetching data:', error);\n      });\n  }, [movieId]);\n\n  return (\n    <div>\n      {cast.length === 0 ? (\n        <p>No cast information available.</p>\n      ) : (\n        <ul>\n          {cast.map((actor) => (\n            <li key={actor.id}>\n              {actor.profile_path && (\n                <img\n                  src={`https://image.tmdb.org/t/p/w200/${actor.profile_path}`}\n                  alt={actor.name}\n                />\n              )}\n              <p>Name: {actor.name}</p>\n              <p>Character: {actor.character}</p>\n            </li>\n          ))}\n        </ul>\n      )}\n    </div>\n  );\n}\n\nexport default Cast;"," import axios from 'axios';\n\nconst API_KEY = '4f40632f604dfec179dda8e530bb62da';\nconst BASE_URL = 'https://api.themoviedb.org/3';\n\nconst fetchTrendingMovies = async () => {\n  try {\n    const response = await axios.get(\n      `${BASE_URL}/trending/movie/week?api_key=${API_KEY}`\n    );\n    return response.data.results;\n  } catch (error) {\n    throw error;\n  }\n};\n\nconst searchMovies = async (query) => {\n  try {\n    const response = await axios.get(\n      `${BASE_URL}/search/movie?api_key=${API_KEY}&query=${query}`\n    );\n    return response.data.results;\n  } catch (error) {\n    throw error;\n  }\n};\n\nconst fetchMovieDetails = async (movieId) => {\n  try {\n    const response = await axios.get(\n      `${BASE_URL}/movie/${movieId}?api_key=${API_KEY}`\n    );\n    return response.data;\n  } catch (error) {\n    throw error;\n  }\n};\n\nconst fetchMovieCredits = async (movieId) => {\n  try {\n    const response = await axios.get(\n      `${BASE_URL}/movie/${movieId}/credits?api_key=${API_KEY}`\n    );\n    return response.data.cast;\n  } catch (error) {\n    throw error;\n  }\n};\n\nconst fetchMovieReviews = async (movieId) => {\n  try {\n    const response = await axios.get(\n      `${BASE_URL}/movie/${movieId}/reviews?api_key=${API_KEY}`\n    );\n    return response.data.results;\n  } catch (error) {\n    throw error;\n  }\n};\n\nexport {\n  fetchTrendingMovies,\n  searchMovies,\n  fetchMovieDetails,\n  fetchMovieCredits,\n  fetchMovieReviews,\n};"],"names":["movieId","useParams","useState","cast","setCast","useEffect","fetchMovieCredits","then","catch","error","console","length","map","actor","profile_path","src","alt","name","character","id","API_KEY","BASE_URL","fetchTrendingMovies","axios","response","data","results","searchMovies","query","fetchMovieDetails","fetchMovieReviews"],"sourceRoot":""}